package com.sunlines.qi.monitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlines.qi.monitor.entity.Coordinate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COORDINATE".
*/
public class CoordinateDao extends AbstractDao<Coordinate, Long> {

    public static final String TABLENAME = "COORDINATE";

    /**
     * Properties of entity Coordinate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Row = new Property(1, int.class, "row", false, "ROW");
        public final static Property Col = new Property(2, int.class, "col", false, "COL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property SName = new Property(4, String.class, "sName", false, "S_NAME");
    }


    public CoordinateDao(DaoConfig config) {
        super(config);
    }
    
    public CoordinateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COORDINATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ROW\" INTEGER NOT NULL ," + // 1: row
                "\"COL\" INTEGER NOT NULL ," + // 2: col
                "\"NAME\" TEXT," + // 3: name
                "\"S_NAME\" TEXT);"); // 4: sName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COORDINATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Coordinate entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRow());
        stmt.bindLong(3, entity.getCol());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sName = entity.getSName();
        if (sName != null) {
            stmt.bindString(5, sName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Coordinate entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRow());
        stmt.bindLong(3, entity.getCol());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sName = entity.getSName();
        if (sName != null) {
            stmt.bindString(5, sName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Coordinate readEntity(Cursor cursor, int offset) {
        Coordinate entity = new Coordinate( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // row
            cursor.getInt(offset + 2), // col
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Coordinate entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRow(cursor.getInt(offset + 1));
        entity.setCol(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Coordinate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Coordinate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Coordinate entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
