package com.sunlines.qi.monitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlines.qi.monitor.entity.CommError;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMM_ERROR".
*/
public class CommErrorDao extends AbstractDao<CommError, Long> {

    public static final String TABLENAME = "COMM_ERROR";

    /**
     * Properties of entity CommError.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property ErrorName = new Property(2, String.class, "errorName", false, "ERROR_NAME");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Dt = new Property(4, java.util.Date.class, "dt", false, "DT");
    }


    public CommErrorDao(DaoConfig config) {
        super(config);
    }
    
    public CommErrorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMM_ERROR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"ERROR_NAME\" TEXT," + // 2: errorName
                "\"MESSAGE\" TEXT," + // 3: message
                "\"DT\" INTEGER);"); // 4: dt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMM_ERROR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommError entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
 
        String errorName = entity.getErrorName();
        if (errorName != null) {
            stmt.bindString(3, errorName);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
 
        java.util.Date dt = entity.getDt();
        if (dt != null) {
            stmt.bindLong(5, dt.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommError entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
 
        String errorName = entity.getErrorName();
        if (errorName != null) {
            stmt.bindString(3, errorName);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
 
        java.util.Date dt = entity.getDt();
        if (dt != null) {
            stmt.bindLong(5, dt.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CommError readEntity(Cursor cursor, int offset) {
        CommError entity = new CommError( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // errorName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // dt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommError entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setErrorName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommError entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommError entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommError entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
