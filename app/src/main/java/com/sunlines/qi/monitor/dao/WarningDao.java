package com.sunlines.qi.monitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlines.qi.monitor.entity.Warning;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WARNING".
*/
public class WarningDao extends AbstractDao<Warning, Long> {

    public static final String TABLENAME = "WARNING";

    /**
     * Properties of entity Warning.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Fk = new Property(1, long.class, "fk", false, "FK");
        public final static Property Position = new Property(2, String.class, "position", false, "POSITION");
        public final static Property Box = new Property(3, String.class, "box", false, "BOX");
        public final static Property Rid = new Property(4, int.class, "rid", false, "RID");
        public final static Property Definite = new Property(5, String.class, "definite", false, "DEFINITE");
        public final static Property Value = new Property(6, float.class, "value", false, "VALUE");
        public final static Property Date = new Property(7, String.class, "date", false, "DATE");
    }


    public WarningDao(DaoConfig config) {
        super(config);
    }
    
    public WarningDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WARNING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"FK\" INTEGER NOT NULL ," + // 1: fk
                "\"POSITION\" TEXT," + // 2: position
                "\"BOX\" TEXT," + // 3: box
                "\"RID\" INTEGER NOT NULL ," + // 4: rid
                "\"DEFINITE\" TEXT," + // 5: definite
                "\"VALUE\" REAL NOT NULL ," + // 6: value
                "\"DATE\" TEXT);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WARNING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Warning entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFk());
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(3, position);
        }
 
        String box = entity.getBox();
        if (box != null) {
            stmt.bindString(4, box);
        }
        stmt.bindLong(5, entity.getRid());
 
        String definite = entity.getDefinite();
        if (definite != null) {
            stmt.bindString(6, definite);
        }
        stmt.bindDouble(7, entity.getValue());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Warning entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFk());
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(3, position);
        }
 
        String box = entity.getBox();
        if (box != null) {
            stmt.bindString(4, box);
        }
        stmt.bindLong(5, entity.getRid());
 
        String definite = entity.getDefinite();
        if (definite != null) {
            stmt.bindString(6, definite);
        }
        stmt.bindDouble(7, entity.getValue());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Warning readEntity(Cursor cursor, int offset) {
        Warning entity = new Warning( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // fk
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // position
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // box
            cursor.getInt(offset + 4), // rid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // definite
            cursor.getFloat(offset + 6), // value
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Warning entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFk(cursor.getLong(offset + 1));
        entity.setPosition(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBox(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRid(cursor.getInt(offset + 4));
        entity.setDefinite(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValue(cursor.getFloat(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Warning entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Warning entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Warning entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
