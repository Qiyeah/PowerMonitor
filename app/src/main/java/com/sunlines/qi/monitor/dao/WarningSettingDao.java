package com.sunlines.qi.monitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlines.qi.monitor.entity.WarningSetting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WARNING_SETTING".
*/
public class WarningSettingDao extends AbstractDao<WarningSetting, Long> {

    public static final String TABLENAME = "WARNING_SETTING";

    /**
     * Properties of entity WarningSetting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Fk = new Property(1, long.class, "fk", false, "FK");
        public final static Property Rid = new Property(2, int.class, "rid", false, "RID");
        public final static Property Temp = new Property(3, float.class, "temp", false, "TEMP");
        public final static Property State = new Property(4, int.class, "state", false, "STATE");
        public final static Property MDate = new Property(5, java.util.Date.class, "mDate", false, "M_DATE");
    }


    public WarningSettingDao(DaoConfig config) {
        super(config);
    }
    
    public WarningSettingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WARNING_SETTING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"FK\" INTEGER NOT NULL ," + // 1: fk
                "\"RID\" INTEGER NOT NULL ," + // 2: rid
                "\"TEMP\" REAL NOT NULL ," + // 3: temp
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"M_DATE\" INTEGER);"); // 5: mDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WARNING_SETTING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WarningSetting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFk());
        stmt.bindLong(3, entity.getRid());
        stmt.bindDouble(4, entity.getTemp());
        stmt.bindLong(5, entity.getState());
 
        java.util.Date mDate = entity.getMDate();
        if (mDate != null) {
            stmt.bindLong(6, mDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WarningSetting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getFk());
        stmt.bindLong(3, entity.getRid());
        stmt.bindDouble(4, entity.getTemp());
        stmt.bindLong(5, entity.getState());
 
        java.util.Date mDate = entity.getMDate();
        if (mDate != null) {
            stmt.bindLong(6, mDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WarningSetting readEntity(Cursor cursor, int offset) {
        WarningSetting entity = new WarningSetting( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // fk
            cursor.getInt(offset + 2), // rid
            cursor.getFloat(offset + 3), // temp
            cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // mDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WarningSetting entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFk(cursor.getLong(offset + 1));
        entity.setRid(cursor.getInt(offset + 2));
        entity.setTemp(cursor.getFloat(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setMDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WarningSetting entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WarningSetting entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WarningSetting entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
